#!/usr/bin/perl -w

# send-reports:
# Send new problem reports to councils
#
# Copyright (c) 2007 UK Citizens Online Democracy. All rights reserved.
# Email: matthew@mysociety.org. WWW: http://www.mysociety.org
#
# $Id: send-reports,v 1.79 2010-01-06 16:50:26 louise Exp $

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../commonlib/perllib";
use Encode;
use Error qw(:try);
use File::Slurp;
use JSON;
use LWP::Simple;
use CGI; # Trying awkward kludge
use CronFns;

use BarnetWSDL;
use EastHantsWSDL;
use Cobrand;
use Utils;
use mySociety::Config;
use mySociety::DBHandle qw(dbh);
use mySociety::Email;
use mySociety::EmailUtil;
use mySociety::Locale;
use mySociety::MaPit;
use mySociety::Random qw(random_bytes);
use mySociety::Web qw(ent);

BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
    mySociety::DBHandle::configure(
        Name => mySociety::Config::get('BCI_DB_NAME'),
        User => mySociety::Config::get('BCI_DB_USER'),
        Password => mySociety::Config::get('BCI_DB_PASS'),
        Host => mySociety::Config::get('BCI_DB_HOST', undef),
        Port => mySociety::Config::get('BCI_DB_PORT', undef)
    );
}

# specific council numbers
use constant COUNCIL_ID_BARNET     => 2489;
use constant COUNCIL_ID_EAST_HANTS => 2330;

# Set up site, language etc.
my ($verbose, $nomail) = CronFns::options();
my $base_url = mySociety::Config::get('BASE_URL');
my $site = CronFns::site($base_url);

my $query = "SELECT id, council, category, title, detail, name, email, phone,
    used_map, latitude, longitude, (photo is not null) as has_photo, lang, 
    cobrand, cobrand_data
      FROM problem
      WHERE state in ('confirmed','fixed')
        AND whensent IS NULL
        AND council IS NOT NULL";
my $unsent = dbh()->selectall_arrayref($query, { Slice => {} });

my (%notgot, %note);
my $cobrand;
my $cobrand_data;
foreach my $row (@$unsent) {
    
    $cobrand = $row->{cobrand};
    $cobrand_data = $row->{cobrand_data};
    # Cobranded and non-cobranded messages can share a database. In this case, the conf file 
    # should specify a vhost to send the reports for each cobrand, so that they don't get sent 
    # more than once if there are multiple vhosts running off the same database. The email_host
    # call checks if this is the host that sends mail for this cobrand.
    next unless (Cobrand::email_host($cobrand));
    Cobrand::set_lang_and_domain($cobrand, $row->{lang}, 1);
    if (dbh()->selectrow_array('select email from abuse where lower(email)=?', {}, lc($row->{email}))) {
        dbh()->do("update problem set state='hidden' where id=?", {}, $row->{id});
        dbh()->commit();
        next;
    }

    my $send_email = 0;
    my $send_web = 0;

    mySociety::Locale::change($row->{lang});

    # Template variables for the email
    my $email_base_url = Cobrand::base_url_for_emails($cobrand, $cobrand_data);
    my %h = map { $_ => $row->{$_} } qw/title detail name email phone category latitude longitude/;
    $h{url} = $email_base_url . '/report/' . $row->{id};
    $h{phone_line} = $h{phone} ? _('Phone:') . " $h{phone}\n\n" : '';
    if ($row->{has_photo}) {
        $h{has_photo} = _("This web page also contains a photo of the problem, provided by the user.") . "\n\n";
        $h{image_url} = $email_base_url . '/photo?id=' . $row->{id};
    } else {
        $h{has_photo} = '';
        $h{image_url} = '';
    }
    $h{fuzzy} = $row->{used_map} ? _('To view a map of the precise location of this issue')
        : _('The user could not locate the problem on a map, but to see the area around the location they entered');
    $h{closest_address} = '';
    
    # If we are in the UK include eastings and northings, and nearest stuff
    $h{easting_northing} = '';
    if ( mySociety::Config::get('COUNTRY') eq 'GB' ) {

        ( $h{easting}, $h{northing} ) = Utils::convert_latlon_to_en( $h{latitude}, $h{longitude} );

        # email templates don't have conditionals so we need to farmat this here
        $h{easting_northing}                             #
          = "Easting: $h{easting}\n\n"                   #
          . "Northing: $h{northing}\n\n";

        $h{closest_address} = find_closest($row, $h{latitude}, $h{longitude});
    }
    $h{closest_address_machine} = $h{closest_address};

    my (@to, @recips, $template, $areas_info);
    if ($site eq 'emptyhomes') {

        my $council = $row->{council};
        $areas_info = mySociety::MaPit::call('areas', $council);
        my $name = $areas_info->{$council}->{name};
        my ($council_email, $confirmed, $note) = dbh()->selectrow_array(
            "SELECT email,confirmed,note FROM contacts WHERE deleted='f'
                and area_id=? AND category=?", {}, $council, 'Empty property');
        unless ($confirmed) {
            $note = 'Council ' . $council . ' deleted' unless $note;
            $council_email = 'N/A' unless $council_email;
            $notgot{$council_email}{$row->{category}}++;
            $note{$council_email}{$row->{category}} = $note;
            next;
        }

        push @to, [ $council_email, $name ];
        @recips = ($council_email);
        $send_email = 1;
        $template = File::Slurp::read_file("$FindBin::Bin/../templates/emails/submit-eha");

    } else {

        # XXX Needs locks!
        my @all_councils = split /,|\|/, $row->{council};
        my ($councils, $missing) = $row->{council} =~ /^([\d,]+)(?:\|([\d,]+))?/;
        my @councils = split(/,/, $councils);
        $areas_info = mySociety::MaPit::call('areas', \@all_councils);
        my (@dear, %recips);
        my $all_confirmed = 1;
        foreach my $council (@councils) {
            my $name = $areas_info->{$council}->{name};
            push @dear, $name;
            if ($council == COUNCIL_ID_EAST_HANTS) { # E. Hants have a web service
                $send_web = $council;
                $h{category} = 'Customer Services' if $h{category} eq 'Other';
            } elsif ($council == COUNCIL_ID_BARNET) { #Â Barnet have a web service
                $send_web = $council;                
                $h{category} = 'BARNET CRM'; # FIXME force category (by arrangement with Barnet)
            } else {
                my ($council_email, $confirmed, $note) = dbh()->selectrow_array(
                    "SELECT email,confirmed,note FROM contacts WHERE deleted='f'
                        and area_id=? AND category=?", {}, $council, $row->{category});
                $council_email = essex_contact($row->{latitude}, $row->{longitude}) if $council == 2225;
                $council_email = oxfordshire_contact($row->{latitude}, $row->{longitude}) if $council == 2237 && $council_email eq 'SPECIAL';
                unless ($confirmed) {
                    $all_confirmed = 0;
                    $note = 'Council ' . $row->{council} . ' deleted'
                        unless $note;
                    $council_email = 'N/A' unless $council_email;
                    $notgot{$council_email}{$row->{category}}++;
                    $note{$council_email}{$row->{category}} = $note;
                }
                push @to, [ $council_email, $name ];
                $recips{$council_email} = 1;
                $send_email = 1;
            }
        }
        @recips = keys %recips;
        next unless $all_confirmed;

        $template = 'submit-council';
        $template = 'submit-brent' if $row->{council} eq 2488 || $row->{council} eq 2237;
        $template = File::Slurp::read_file("$FindBin::Bin/../templates/emails/$template");

        if ($h{category} eq _('Other')) {
            $h{category_footer} = _('this type of local problem');
            $h{category_line} = '';
        } else {
            $h{category_footer} = "'" . $h{category} . "'";
            $h{category_line} = sprintf(_("Category: %s"), $h{category}) . "\n\n";
        }

        $h{councils_name} = join(_(' and '), @dear);
        $h{multiple} = @dear>1 ? "[ " . _("This email has been sent to both councils covering the location of the problem, as the user did not categorise it; please ignore it if you're not the correct council to deal with the issue, or let us know what category of problem this is so we can add it to our system.") . " ]\n\n"
            : '';
        $h{missing} = ''; 
        if ($missing) {
            my $name = $areas_info->{$missing}->{name};
            $h{missing} = '[ '
              . sprintf(_('We realise this problem might be the responsibility of %s; however, we don\'t currently have any contact details for them. If you know of an appropriate contact address, please do get in touch.'), $name)
              . " ]\n\n";
        }

    }

    unless ($send_email || $send_web) {
        die 'Report not going anywhere for ID ' . $row->{id} . '!';
    }

    my $testing_email = mySociety::Config::get('TESTING_EMAIL');
    if ($row->{email} eq $testing_email) {
        @recips = ( $testing_email );
        $send_web = 0;
        $send_email = 1;
    } elsif (mySociety::Config::get('STAGING_SITE')) {
        # on a staging server send emails to ourselves rather than the councils
        @recips = ( mySociety::Config::get('CONTACT_EMAIL') );
    } elsif ($site eq 'emptyhomes') {
        my $council = $row->{council};
        my $country = $areas_info->{$council}->{country};
        if ($country eq 'W') {
            push @recips, 'shelter@' . mySociety::Config::get('EMAIL_DOMAIN');
        } else {
            push @recips, 'eha@' . mySociety::Config::get('EMAIL_DOMAIN');
        }
        push @recips, 'matthew@' . mySociety::Config::get('EMAIL_DOMAIN');
    }

    # Special case for this parish council
    # if ($address && $address =~ /Sprowston/ && $row->{council} == 2233 && $row->{category} eq 'Street lighting') {
    #     $h{councils_name} = 'Sprowston Parish Council';
    #     my $e = 'parishclerk' . '@' . 'sprowston-pc.gov.uk';
    #     @to = ( [ $e, $h{councils_name} ] );
    #     @recips = ($e);
    # }

    # Multiply results together, so one success counts as a success.
    my $result = -1;

    if ($send_email) {
        $template = _($template);
        my $email = mySociety::Locale::in_gb_locale { mySociety::Email::construct_email({
            _template_ => $template,
            _parameters_ => \%h,
            To => \@to,
            From => [ $row->{email}, $row->{name} ],
            'Message-ID' => sprintf('<report-%s-%s@mysociety.org>', time(), unpack('h*', random_bytes(5, 1))),
        }) };
        if (!$nomail) {
            $result *= mySociety::EmailUtil::send_email($email, mySociety::Config::get('CONTACT_EMAIL'), @recips);
        } else {
            print $email;
        }
    }

    if ($send_web) {
        if ($send_web == COUNCIL_ID_BARNET) {
            $h{message} = construct_barnet_message(%h);
            if (!$nomail) {
                $result *= post_barnet_message(%h);
            }
        } elsif ($send_web == COUNCIL_ID_EAST_HANTS) {
            $h{message} = construct_easthants_message(%h);
            if (!$nomail) {
                $result *= post_easthants_message(%h);
            }
        }
        # currently no action if it's not one of the two supported councils
    }

    if ($result == mySociety::EmailUtil::EMAIL_SUCCESS) {
        dbh()->do('UPDATE problem SET whensent=ms_current_timestamp(),
            lastupdate=ms_current_timestamp() WHERE id=?', {}, $row->{id});
        dbh()->commit();
    } else {
        dbh()->rollback();
    }
}

if ($verbose) {
    print "Council email addresses that need checking:\n" if keys %notgot;
    foreach my $e (keys %notgot) {
        foreach my $c (keys %{$notgot{$e}}) {
            print $notgot{$e}{$c} . " problem, to $e category $c (" . $note{$e}{$c}. ")\n";
        }
    }
}

sub _get_district_for_contact {
    my ( $lat, $lon ) = @_;
    my $district =
      mySociety::MaPit::call( 'point', "4326/$lon,$lat", type => 'DIS' );
    ($district) = keys %$district;
    return $district;
}

# Essex has different contact addresses depending upon the district
# Might be easier if we start storing in the db all areas covered by a point
# Will do for now :)
sub essex_contact {
    my $district = _get_district_for_contact(@_);
    my $email;
    $email = 'eastarea' if $district == 2315 || $district == 2312;
    $email = 'midarea' if $district == 2317 || $district == 2314 || $district == 2316;
    $email = 'southarea' if $district == 2319 || $district == 2320 || $district == 2310;
    $email = 'westarea' if $district == 2309 || $district == 2311 || $district == 2318 || $district == 2313;
    die "Returned district $district which is not in Essex!" unless $email;
    return "highways.$email\@essexcc.gov.uk";
}

# Oxfordshire has different contact addresses depending upon the district
sub oxfordshire_contact {
    my $district = _get_district_for_contact(@_);
    my $email;
    $email = 'northernarea' if $district == 2419 || $district == 2420 || $district == 2421;
    $email = 'southernarea' if $district == 2417 || $district == 2418;
    die "Returned district $district which is not in Oxfordshire!" unless $email;
    return "$email\@oxfordshire.gov.uk";
}

sub construct_easthants_message {
    my %h = @_;
    my $message = '';
    $message .= "[ This report was also sent to the district council covering the location of the problem, as the user did not categorise it; please ignore if you're not the correct council to deal with the issue. ]\n\n"
        if $h{multiple};
    $message .= <<EOF;
Subject: $h{title}

Details: $h{detail}

$h{fuzzy}, or to provide an update on the problem, please visit the following link:

$h{url}

$h{closest_address}
EOF
    return $message;
}

my $eh_service;
sub post_easthants_message {
    my %h = @_;
    my $return = 1;
    $eh_service ||= EastHantsWSDL->on_fault(sub { my($soap, $res) = @_; die ref $res ? $res->faultstring : $soap->transport->status, "\n"; });
    try {
        # ServiceName, RemoteCreatedBy, Salutation, FirstName, Name, Email, Telephone, HouseNoName, Street, Town, County, Country, Postcode, Comments, FurtherInfo, ImageURL
        my $message = ent(encode_utf8($h{message}));
        my $name = ent(encode_utf8($h{name}));
        my $result = $eh_service->INPUTFEEDBACK(
            $h{category}, 'FixMyStreet', '', '', $name, $h{email}, $h{phone},
            '', '', '', '', '', '', $message, 'Yes', $h{image_url}
        );
        $return = 0 if $result eq 'Report received';
    } otherwise {
        my $e = shift;
        print "Caught an error: $e\n";
    };
    return $return;
}

# TODO: currently just blind copy of construct_easthants_message, normally all Barnet reports will go via the web service (?)
sub construct_barnet_message {
    my %h = @_;
    my $message = '';
    $message .= "[ This report was also sent to the district council covering the location of the problem, as the user did not categorise it; please ignore if you're not the correct council to deal with the issue. ]\n\n"
        if $h{multiple};
    $message .= <<EOF;
Subject: $h{title}

Details: $h{detail}

$h{fuzzy}, or to provide an update on the problem, please visit the following link:

$h{url}

$h{closest_address}
EOF
    return $message;
}

my $barnet_service;
sub post_barnet_message {
    my %h = @_;
    my $return = 1;
    $barnet_service ||= BarnetWSDL->on_fault(sub { my($soap, $res) = @_; die ref $res ? $res->faultstring : $soap->transport->status, "\n"; });
    try {
        my $kbid = $h{category}; # TODO: KBID is 50-char category ID: map our category -> Barnet KBID
                                 # TODO: certainly won't validate until we are using KBID values provided by Barnet
        my $message = ent(encode_utf8($h{message}));
        my $name = ent(encode_utf8($h{name}));
        my $location = $h{easting_northing}; # TODO: need to construct complex type for this: it's actually GEOCODE within BAPI_TTET_ADDRESS_COM:
                                             # comprising: COUNTRY2, REGION, COUNTY, CITY, POSTALCODE, STREET, STREETNUMBER, GEOCODE

        # TODO: username/password authentication will be required to access the webservice
        
        my $result = $barnet_service->Z_CRM_SERVICE_ORDER_CREATE(
            '',         # ET_RETURN (?)
            $message,   # IT_PROBLEM_DESC (SAP defines this as a table of text lines:  might need this broken up?)
            $h{email},  # IV_CUST_EMAIL
            $name,      # IV_CUST_NAME
            $kbid,      # IV_KBID 
            $h{id},     # IV_PROBLEM_ID
            $location,  # IV_PROBLEM_LOC (see above)
            '',         # IV_PROBLEM_SUB (?)  
        );
        $return = 0 if $result eq 'Report received';
    } otherwise {
        my $e = shift;
        print "Caught an error: $e\n"; # anticipate: DUPLICATE_ORDER
    };
    return $return;
}

sub find_closest {
    my ($row, $latitude, $longitude) = @_;
    my $str = '';

    return '' unless $row->{used_map};

    # Get nearest road-type thing from Bing
    my $url = "http://dev.virtualearth.net/REST/v1/Locations/$latitude,$longitude?c=en-GB&key=" . mySociety::Config::get('BING_MAPS_API_KEY');
    my $j = LWP::Simple::get($url);
    if ($j) {
        $j = JSON->new->utf8->allow_nonref->decode($j);
        if ($j->{resourceSets}[0]{resources}[0]{name}) {
            $str .= "Nearest road to the pin placed on the map (automatically generated by Bing Maps): $j->{resourceSets}[0]{resources}[0]{name}\n\n";
        }
    }

    # Get nearest postcode from Matthew's random gazetteer (put in MaPit? Or elsewhere?)
    $url = "http://gazetteer.dracos.vm.bytemark.co.uk/point/$latitude,$longitude.json";
    $j = LWP::Simple::get($url);
    if ($j) {
        $j = JSON->new->utf8->allow_nonref->decode($j);
        if ($j->{postcode}) {
            $str .= "Nearest postcode to the pin placed on the map (automatically generated): $j->{postcode}[0] ($j->{postcode}[1]m away)\n\n";
        }
    }
    return $str;
}

